
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { MessageSquare, CheckCircle, XCircle, Clock } from "lucide-react";
import { useState, useEffect } from "react";
import { collection, query, where, getDocs } from "firebase/firestore";
import { db } from "@/lib/firebase";

interface Feedback {
  id: string;
  submissionId: string;
  userId: string;
  feedback: string;
  createdAt: Date;
  adminAction: "approved" | "rejected";
}

interface FeedbackDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  submissionId: string;
  submissionStatus: string;
  weekNumber: number;
}

const FeedbackDialog = ({ open, onOpenChange, submissionId, submissionStatus, weekNumber }: FeedbackDialogProps) => {
  const [feedback, setFeedback] = useState<Feedback | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (open && submissionId) {
      fetchFeedback();
    }
  }, [open, submissionId]);

  const fetchFeedback = async () => {
    setLoading(true);
    try {
      const feedbackQuery = query(
        collection(db, "feedback"),
        where("submissionId", "==", submissionId)
      );
      
      const feedbackSnapshot = await getDocs(feedbackQuery);
      
      if (!feedbackSnapshot.empty) {
        const feedbackDoc = feedbackSnapshot.docs[0];
        const feedbackData = {
          id: feedbackDoc.id,
          ...feedbackDoc.data(),
          createdAt: feedbackDoc.data().createdAt?.toDate()
        } as Feedback;
        setFeedback(feedbackData);
      } else {
        setFeedback(null);
      }
    } catch (error) {
      console.error("Error fetching feedback:", error);
    } finally {
      setLoading(false);
    }
  };

  const getAutoGeneratedMessage = () => {
    switch (submissionStatus) {
      case "approved":
        return "Great work! Your submission has been approved. Keep up the excellent progress and continue building your skills. You're doing fantastic!";
      case "rejected":
        return "Your submission needs some improvements before it can be approved. Please review the requirements and resubmit when ready. Don't give up - every iteration makes you better!";
      case "pending":
        return "Your submission is currently being reviewed by our team. Please be patient as we carefully evaluate your work. You'll receive an update soon!";
      default:
        return "No feedback available at this time.";
    }
  };

  const getStatusIcon = () => {
    switch (submissionStatus) {
      case "approved":
        return <CheckCircle className="h-6 w-6 text-green-500" />;
      case "rejected":
        return <XCircle className="h-6 w-6 text-red-500" />;
      case "pending":
        return <Clock className="h-6 w-6 text-yellow-500" />;
      default:
        return <MessageSquare className="h-6 w-6 text-gray-500" />;
    }
  };

  const getStatusColor = () => {
    switch (submissionStatus) {
      case "approved":
        return "text-green-600";
      case "rejected":
        return "text-red-600";
      case "pending":
        return "text-yellow-600";
      default:
        return "text-gray-600";
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-blue-600" />
            Week {weekNumber} Submission Feedback
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gray-50 rounded-lg">
            {getStatusIcon()}
            <div>
              <p className="font-medium text-gray-800">Submission Status</p>
              <p className={`text-sm font-semibold ${getStatusColor()}`}>
                {submissionStatus.charAt(0).toUpperCase() + submissionStatus.slice(1)}
              </p>
            </div>
          </div>

          {loading ? (
            <div className="flex items-center justify-center p-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="p-4 bg-white border border-gray-200 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-3 flex items-center gap-2">
                  <MessageSquare className="h-4 w-4" />
                  {feedback ? "Admin Feedback" : "System Message"}
                </h3>
                <p className="text-gray-700 leading-relaxed">
                  {feedback ? feedback.feedback : getAutoGeneratedMessage()}
                </p>
                
                {feedback && (
                  <div className="mt-3 pt-3 border-t border-gray-100">
                    <p className="text-xs text-gray-500">
                      Feedback provided on {feedback.createdAt?.toLocaleDateString()} at {feedback.createdAt?.toLocaleTimeString()}
                    </p>
                  </div>
                )}
              </div>

              {submissionStatus === "rejected" && (
                <div className="p-4 bg-amber-50 border border-amber-200 rounded-lg">
                  <h4 className="font-medium text-amber-800 mb-2">Next Steps</h4>
                  <ul className="text-sm text-amber-700 space-y-1">
                    <li>â€¢ Review the feedback carefully</li>
                    <li>â€¢ Make the necessary improvements to your project</li>
                    <li>â€¢ Update your submission when ready</li>
                    <li>â€¢ Don't hesitate to ask questions if needed</li>
                  </ul>
                </div>
              )}

              {submissionStatus === "approved" && (
                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                  <h4 className="font-medium text-green-800 mb-2">Congratulations! ðŸŽ‰</h4>
                  <p className="text-sm text-green-700">
                    Your Week {weekNumber} submission has been approved. You can now proceed to the next week's tasks.
                  </p>
                </div>
              )}
            </div>
          )}

          <div className="flex justify-end pt-4">
            <Button onClick={() => onOpenChange(false)} variant="outline">
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default FeedbackDialog;
